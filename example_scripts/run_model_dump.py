"""

This is a script to dump different plasmasphere models into this directory
based on user inputs

This script will also take in a 'card' configuration file generated by the gen_ngo_defaults
function, which is mainly controlled by Kp

This script is configured to import settings from run_rays, but there is also the option to
set different parameters here

"""

# import packages needed

import numpy as np
import subprocess
import os
import datetime

# import function for the ngo plasmasphere model config

from gen_ngo_defaults import gen_ngo_defaults

# import settings

from raytracer_settings import *

#  -------------------------------- INITIALIZE   --------------------------------------

# GCPM model and damping code needs to be run in the same directory
# as the binary file (and all the misc data files)

cwd = os.getcwd();
os.chdir('../bin')

mag_dump = False  # True for mag dipole coords, false for SM

# generate config file for set Kp

gen_ngo_defaults(Kp, configfile)

# Dump plasmasphere models

print("Dumping plasmasphere models")

for mode in modes_to_do:
    for plane in ['XZ', 'XY', 'YZ']:

        print("doing model %d, %s plane" % (mode, plane))
        maxD = 10.0 * R_E
        if plane == 'XZ':
            minx = -maxD
            maxx = maxD
            miny = 0
            maxy = 0
            minz = -maxD
            maxz = maxD
            nx = 200
            ny = 1
            nz = 200
        if plane == 'XY':
            minx = -maxD
            maxx = maxD
            miny = -maxD
            maxy = maxD
            minz = 0
            maxz = 0
            nx = 200
            ny = 200
            nz = 1
        if plane == 'YZ':
            minx = 0
            maxx = 0
            miny = -maxD
            maxy = maxD
            minz = -maxD
            maxz = maxD
            nx = 1
            ny = 200
            nz = 200

        # model_outfile='model_dump_mode%d_%d_%s.dat'%(modelnum, use_IGRF, plane)
        if mag_dump:
            model_outfile = os.path.join(ray_out_dir, 'model_dump_mode_%d_%s_MAG.dat' % (mode, plane))
        else:
            model_outfile = os.path.join(ray_out_dir, 'model_dump_mode_%d_%s.dat' % (mode, plane))

        cmd = './dumpmodel' + \
              ' --modelnum=%d --yearday=%s --milliseconds_day=%d ' % (mode, yearday, milliseconds_day) + \
              '--minx=%g --maxx=%g ' % (minx, maxx) + \
              '--miny=%g --maxy=%g ' % (miny, maxy) + \
              '--minz=%g --maxz=%g ' % (minz, maxz) + \
              '--nx=%g --ny=%g --nz=%g ' % (nx, ny, nz) + \
              '--filename="%s" ' % (model_outfile) + \
              '--use_igrf=%g --use_tsyganenko=%g ' % (use_IGRF, use_tsyg) + \
              '--tsyganenko_Pdyn=%g ' % (Pdyn) + \
              '--tsyganenko_Dst=%g ' % (Dst) + \
              '--tsyganenko_ByIMF=%g ' % (ByIMF) + \
              '--tsyganenko_BzIMF=%g ' % (BzIMF) + \
              '--tsyganenko_W1=%g ' % (W[0]) + \
              '--tsyganenko_W2=%g ' % (W[1]) + \
              '--tsyganenko_W3=%g ' % (W[2]) + \
              '--tsyganenko_W4=%g ' % (W[3]) + \
              '--tsyganenko_W5=%g ' % (W[4]) + \
              '--tsyganenko_W6=%g ' % (W[5]) + \
              '--gcpm_kp=%g ' % (Kp) + \
              '--ngo_configfile="%s" ' % configfile

        if mode == 3:
            cmd += ' --interp_interpfile="%s"' % mode3_modelfile

        if mode == 4:
            cmd += '--interp_interpfile=%s ' % (mode4_modelfile) + \
                   '--scattered_interp_window_scale=%d ' % (scattered_interp_window_scale) + \
                   '--scattered_interp_order=%d ' % (scattered_interp_order) + \
                   '--scattered_interp_exact=%d ' % (scattered_interp_exact) + \
                   '--scattered_interp_local_window_scale=%d ' % (scattered_interp_local_window_scale)

        if mode == 6:
            cmd += ' --kp=%g ' % (Kp)
            if mag_dump:
                cmd += ' --mag_coords=1 '
        print(cmd)

        os.system(cmd)

# Move back to the working directory
os.chdir(cwd)
